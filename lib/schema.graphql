"Verify types of level"
enum Level {
    junior
    middler
    advanced
}

interface Person {
    _id: ID!
    name: String!
    email: String!
}


type Student implements Person {
    avatar: String
}

type Monidor implements Person {
    phone: String
}


type Course {
    _id: ID!
    title: String!
    teacher: String
    description: String!
    topic: String
    people: [Student]
    level: Level
}

input CourseInput {
    title: String!
    teacher: String
    description: String!
    topic: String
    level: Level
}

input CourseEditInput {
    title: String
    teacher: String
    description: String
    topic: String
}

# %%%%%%%%%%%%%% STUDENT %%%%%%%%%%%%%%
""" 
type Student {
    _id: ID!
    name: String!
    email: String!
} """


input StudentInput {
    name: String!
    email: String!
}

input StudentEditInput {
    name: String
    email: String
}

# %%%%%%%%%%%%%% QUERIES %%%%%%%%%%%%%%

type Query {
    "Get all courses"
    getCourses: [Course]
    "Return a course by ID"
    getCourse(id : ID!): Course

    #  STUDENT

    "Get all students"
    getStudents: [Student]
    "Return a student by ID"
    getStudent(id : ID!): Student
}

type Mutation {
    "Create a new course"
    createCourse(input: CourseInput!): Course
    "Update a course"
    updateCourse(id: ID!, input: CourseEditInput): Course

    # STUDENT
    "Create a new student"
    createStudent(input: StudentInput!): Student
    "Update a student"
    updateStudent(id: ID!, input: StudentEditInput): Student

    # PERSON TO COURSE
    "Add students to a course"
    addPeople(courseID: ID!, personID: ID!): Course
}