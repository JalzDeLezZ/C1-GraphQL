"Verify types of level"
enum Level {
    junior
    middler
    advanced
}

union GlobalSearch = Course | Student | Monitor

# %%%%%%%%%%%%%%%%%%%%%%%%

type Course {
    _id: ID!
    title: String!
    teacher: String
    description: String!
    topic: String @deprecated(reason: "Use topic instead")
    people: [Student]
    level: Level
}

input CourseInput {
    title: String!
    teacher: String
    description: String!
    topic: String
    level: Level
}

input CourseEditInput {
    title: String
    teacher: String
    description: String
    topic: String
}

# %%%%%%%%%%%%%% PERSON %%%%%%%%%%%%%%

interface Person {
    _id: ID!
    name: String!
    email: String!
}

input PersonInput {
    name: String!
    email: String!
    phone: String
    avatar: String
}

type Student implements Person{
    _id: ID!
    name: String!
    email: String!
    avatar: String
}

type Monitor implements Person {
    _id: ID!
    name: String!
    email: String!
    phone: String
}

input PersonEditInput {
    name: String
    email: String
    phone: String
    avatar: String
}

# %%%%%%%%%%%%%% QUERIES %%%%%%%%%%%%%%

type Query {
    "Get all courses"
    getCourses: [Course]
    "Return a course by ID"
    getCourse(id : ID!): Course

    #  STUDENT

    "Get all students"
    getPeople: [Person]
    "Return a student by ID"
    getPerson(id : ID!): Person

    "Execute a global search"
    searchItems(keyword: String!): [GlobalSearch]
}

type Mutation {
    "Create a new course"
    createCourse(input: CourseInput!): Course
    "Update a course"
    updateCourse(id: ID!, input: CourseEditInput): Course

    # STUDENT
    "Create a new person"
    createPerson(input: PersonInput!): Person
    "Update a person"
    updatePerson(id: ID!, input: PersonEditInput): Person

    # PERSON TO COURSE
    "Add students to a course"
    addPeople(courseID: ID!, personID: ID!): Course
}